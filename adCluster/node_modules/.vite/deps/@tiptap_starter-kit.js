import {
  Underline
} from "./chunk-ZICZQFMR.js";
import {
  Strike
} from "./chunk-6KUD4SQ4.js";
import {
  Paragraph
} from "./chunk-L4JPP2UR.js";
import {
  Text
} from "./chunk-OXNHLGEC.js";
import {
  HorizontalRule
} from "./chunk-ODHGGOA6.js";
import {
  Italic
} from "./chunk-M3NA4KJG.js";
import {
  Link
} from "./chunk-RZNBGVYQ.js";
import {
  CodeBlock
} from "./chunk-V5MZSMEG.js";
import {
  BulletList,
  ListItem,
  ListKeymap,
  OrderedList
} from "./chunk-FQTUH3CK.js";
import {
  Document
} from "./chunk-PD7CA4VH.js";
import {
  Heading
} from "./chunk-72G57J5T.js";
import {
  HardBreak
} from "./chunk-6RRZTK3D.js";
import {
  Blockquote
} from "./chunk-EZH4JKSE.js";
import {
  Code
} from "./chunk-XG4HMZAH.js";
import {
  Bold
} from "./chunk-FTYVIEV3.js";
import "./chunk-ICOH2CRD.js";
import {
  Dropcursor,
  Gapcursor,
  TrailingNode,
  UndoRedo
} from "./chunk-XVYM2QVZ.js";
import {
  Extension
} from "./chunk-N5YOJ5WP.js";
import "./chunk-G3PMV62Z.js";

// node_modules/@tiptap/starter-kit/dist/index.js
var StarterKit = Extension.create({
  name: "starterKit",
  addExtensions() {
    var _a, _b, _c, _d;
    const extensions = [];
    if (this.options.bold !== false) {
      extensions.push(Bold.configure(this.options.bold));
    }
    if (this.options.blockquote !== false) {
      extensions.push(Blockquote.configure(this.options.blockquote));
    }
    if (this.options.bulletList !== false) {
      extensions.push(BulletList.configure(this.options.bulletList));
    }
    if (this.options.code !== false) {
      extensions.push(Code.configure(this.options.code));
    }
    if (this.options.codeBlock !== false) {
      extensions.push(CodeBlock.configure(this.options.codeBlock));
    }
    if (this.options.document !== false) {
      extensions.push(Document.configure(this.options.document));
    }
    if (this.options.dropcursor !== false) {
      extensions.push(Dropcursor.configure(this.options.dropcursor));
    }
    if (this.options.gapcursor !== false) {
      extensions.push(Gapcursor.configure(this.options.gapcursor));
    }
    if (this.options.hardBreak !== false) {
      extensions.push(HardBreak.configure(this.options.hardBreak));
    }
    if (this.options.heading !== false) {
      extensions.push(Heading.configure(this.options.heading));
    }
    if (this.options.undoRedo !== false) {
      extensions.push(UndoRedo.configure(this.options.undoRedo));
    }
    if (this.options.horizontalRule !== false) {
      extensions.push(HorizontalRule.configure(this.options.horizontalRule));
    }
    if (this.options.italic !== false) {
      extensions.push(Italic.configure(this.options.italic));
    }
    if (this.options.listItem !== false) {
      extensions.push(ListItem.configure(this.options.listItem));
    }
    if (this.options.listKeymap !== false) {
      extensions.push(ListKeymap.configure((_a = this.options) == null ? void 0 : _a.listKeymap));
    }
    if (this.options.link !== false) {
      extensions.push(Link.configure((_b = this.options) == null ? void 0 : _b.link));
    }
    if (this.options.orderedList !== false) {
      extensions.push(OrderedList.configure(this.options.orderedList));
    }
    if (this.options.paragraph !== false) {
      extensions.push(Paragraph.configure(this.options.paragraph));
    }
    if (this.options.strike !== false) {
      extensions.push(Strike.configure(this.options.strike));
    }
    if (this.options.text !== false) {
      extensions.push(Text.configure(this.options.text));
    }
    if (this.options.underline !== false) {
      extensions.push(Underline.configure((_c = this.options) == null ? void 0 : _c.underline));
    }
    if (this.options.trailingNode !== false) {
      extensions.push(TrailingNode.configure((_d = this.options) == null ? void 0 : _d.trailingNode));
    }
    return extensions;
  }
});
var index_default = StarterKit;
export {
  StarterKit,
  index_default as default
};
//# sourceMappingURL=@tiptap_starter-kit.js.map
